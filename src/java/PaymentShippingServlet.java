import dao.PaymentDAO;
import dao.ShippingDAO;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import model.PaymentMethod;
import model.BuyerDetail;
import model.Address;

import java.io.IOException;
import java.io.PrintWriter;

@WebServlet("/PaymentShippingServlet")
public class PaymentShippingServlet extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        response.setContentType("text/html;charset=UTF-8");
        HttpSession session = request.getSession();
        
        try {
            // 1. Get shipping inputs from form
            String fullName = request.getParameter("shippingName");
            String email = request.getParameter("shippingEmail");
            String mobile = request.getParameter("shippingMobile");
            String addressStr = request.getParameter("shippingAddress");
            String city = request.getParameter("shippingCity");
            String state = request.getParameter("shippingState");
            String postcode = request.getParameter("shippingPostcode");

            // Validate required shipping fields
            if (fullName == null || email == null || mobile == null || 
                addressStr == null || city == null || state == null || postcode == null ||
                fullName.trim().isEmpty() || email.trim().isEmpty() || mobile.trim().isEmpty() || 
                addressStr.trim().isEmpty() || city.trim().isEmpty() || state.trim().isEmpty() || 
                postcode.trim().isEmpty()) {
                throw new Exception("Missing required shipping information");
            }

            // 2. Get payment inputs from form
            String methodName = request.getParameter("payment_method");
            if (methodName == null || methodName.trim().isEmpty()) {
                throw new Exception("Payment method must be selected");
            }

            // Initialize card details
            String cardOwner = "";
            String cardNumber = "";
            String expMonth = "";
            String expYear = "";
            String cvv = "";

            // Only process card details if payment method is card-based
            if ("visa".equals(methodName) || "master".equals(methodName)) {
                cardOwner = request.getParameter("cardOwner");
                cardNumber = request.getParameter("cardNumber");
                expMonth = request.getParameter("expMonth");
                expYear = request.getParameter("expYear");
                cvv = request.getParameter("cvv");
                
                // Validate card details
                if (cardOwner == null || cardNumber == null || expMonth == null || 
                    expYear == null || cvv == null ||
                    cardOwner.trim().isEmpty() || cardNumber.trim().isEmpty() || 
                    expMonth.trim().isEmpty() || expYear.trim().isEmpty() || 
                    cvv.trim().isEmpty()) {
                    throw new Exception("Missing required card information");
                }
            }

            // 3. Create model objects
            BuyerDetail buyer = new BuyerDetail(fullName, email, mobile);
            Address address = new Address(addressStr, city, state, postcode);
            PaymentMethod paymentMethod = new PaymentMethod(methodName, cardOwner, cardNumber, expMonth, expYear, cvv);

            // 4. Save both to database
            ShippingDAO shippingDAO = new ShippingDAO();
            PaymentDAO paymentDAO = new PaymentDAO();
           
            boolean shippingSaved = shippingDAO.saveShipping(buyer, address);
            if (!shippingSaved) {
                throw new Exception("Failed to save shipping information to database");
            }
            
            boolean paymentSaved = paymentDAO.savePayment(paymentMethod);
            if (!paymentSaved) {
                throw new Exception("Failed to save payment information to database");
            }
            
            // 5. Retrieve paymentId & shippingId using DAO (IDs generated by system)
            int paymentId = 0;
            if ("visa".equals(methodName) || "master".equals(methodName)) {
                paymentId = paymentDAO.getPaymentIdByCardNumber(cardNumber);
            } else {
                // For cash/tng, get the latest payment with this method name
                paymentId = paymentDAO.getLatestPaymentIdByMethod(methodName);
            }
            
            int shippingId = shippingDAO.getShippingIdByEmailAndMobile(email, mobile);
            
            if (paymentId == 0 || shippingId == 0) {
                throw new Exception("Error retrieving payment or shipping IDs");
            }
            
            // 6. Store in session for orderConfirmedServlet page
            session.setAttribute("buyer", buyer);
            session.setAttribute("address", address);
            session.setAttribute("paymentMethod", paymentMethod);
            session.setAttribute("paymentId", paymentId);
            session.setAttribute("shippingId", shippingId);
                    
            // 7. Redirect to OrderConfirmedServlet to complete order
            response.sendRedirect(request.getContextPath() + "/OrderConfirmedServlet");
            
        } catch (Exception e) {
            e.printStackTrace();
            response.setContentType("text/html");
            try (PrintWriter out = response.getWriter()) {
                out.println("<html><head><title>Error</title></head><body>");
                out.println("<h2>An error occurred during checkout</h2>");
                out.println("<p>" + e.getMessage() + "</p>");
                out.println("<a href='" + request.getContextPath() + "/PaymentShippingForm.jsp'>Go Back</a>");
                out.println("</body></html>");
            }
        }
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }
    
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }
}