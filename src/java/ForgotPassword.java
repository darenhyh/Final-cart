import java.io.IOException;
import java.util.Properties;
import java.util.Random;
import jakarta.mail.Message;
import jakarta.mail.MessagingException;
import jakarta.mail.PasswordAuthentication;
import jakarta.mail.Session;
import jakarta.mail.Transport;
import jakarta.mail.internet.InternetAddress;
import jakarta.mail.internet.MimeMessage;
import jakarta.servlet.RequestDispatcher;
import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import jakarta.servlet.http.HttpSession;
import dao.LoginDAO;
import model.Login;

@WebServlet("/ForgotPassword")
public class ForgotPassword extends HttpServlet {
    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {

        String email = request.getParameter("email");
        HttpSession mySession = request.getSession();
        int otpvalue = 0;

        // 确保 email 不为空
        if (email != null && !email.equals("")) {
            // 使用 LoginDAO 检查邮箱是否已注册
            LoginDAO loginDAO = new LoginDAO();
            if (!loginDAO.isEmailRegistered(email)) {
                // 如果邮箱未注册，提示用户
                request.setAttribute("message", "This email is not registered.");
                request.getRequestDispatcher("/JSP/ForgotPassword.jsp").forward(request, response);
                return; // 停止执行，避免继续发送 OTP
            }

            // 生成 OTP
            Random rand = new Random();
            otpvalue = rand.nextInt(1255650); // 生成一个随机 OTP

            String to = email;

            // 设置 Gmail SMTP 配置
            Properties props = new Properties();
            props.put("mail.smtp.auth", "true");
            props.put("mail.smtp.starttls.enable", "true");
            props.put("mail.smtp.host", "smtp.gmail.com");
            props.put("mail.smtp.port", "587");

            try {
                props.put("mail.smtp.ssl.socketFactory", MailSSLBypass.getTrustingSSLSocketFactory());
            } catch (Exception e) {
                e.printStackTrace();
            }

            // 创建 Session 并进行身份验证
            Session session = Session.getInstance(props, new jakarta.mail.Authenticator() {
                protected PasswordAuthentication getPasswordAuthentication() {
                    return new PasswordAuthentication("glowydays05@gmail.com", "fxdyehrqpeadjvxd"); // 使用你的 Gmail 和 app 密码
                }
            });

            try {
                MimeMessage message = new MimeMessage(session);
                message.setFrom(new InternetAddress("glowydays05@gmail.com")); // 发件人邮箱
                message.addRecipient(Message.RecipientType.TO, new InternetAddress(to)); // 收件人邮箱
                message.setSubject("Password Reset OTP"); // 邮件主题
                message.setText("Dear Customer,\n\n" +
                                "Your One Time Passcode for resetting your password is : " + otpvalue + "\n\n" +
                                "Please use this Passcode to reset your password for your Glowy Days account. Do not share this Passcode with anyone.\n\n" +
                                "For Inquiries Contact : glowydays05@gmail.com\n\n" +
                                "This email is automatically generated by Glowy Days. Please do not reply to this e-mail.");

                Transport.send(message); // 发送邮件
                System.out.println("Email sent successfully.");
            } catch (MessagingException e) {
                throw new RuntimeException(e);
            }

            // 将 OTP 和 email 保存到 session 中
            mySession.setAttribute("otp", otpvalue);
            mySession.setAttribute("email", email);

            mySession.setAttribute("message", "OTP is sent to your email.");
            response.sendRedirect("/JSP/EnterOTP.jsp");
        }
    }
}
